@startuml

' Main service classes
class CameraService {
  - camera: VideoCapture
  - frame_buffer: np.ndarray
  - last_frame_time: float
  - frame_lock: asyncio.Lock
  - running: bool
  - task: asyncio.Task
  + initialize(camera_id: int, width: int, height: int): None
  + shutdown(): None
  - _capture_frames(): None
  + get_frame(): Tuple[np.ndarray, float]
  + get_jpeg_frame(): Tuple[bytes, float]
}

class DetectionService {
  - running: bool
  - detection_lock: asyncio.Lock
  - last_detections: List[Dict]
  - detections_processed: int
  - camera_service: CameraService
  - license_plate_service: LicensePlateRecognitionService
  - storage_service: StorageService
  - enhancer_service: EnhancerService
  - device: str
  - frame_count: int
  - performance_metrics: Dict
  + initialize(camera_service, enhancer_service): None
  + shutdown(): None
  + get_latest_detections(): List[Dict]
  + process_frame(frame: np.ndarray): Tuple[np.ndarray, List[Dict]]
  - _placeholder_detection(frame: np.ndarray): Tuple[np.ndarray, List[Dict]]
  + detect_from_camera(): Dict
  + detect_from_image(image_data: bytes): Dict
  + process_detection(detection_id: str, detection_result: Dict): None
}

class StorageService {
  - license_plates_dir: str
  - enhanced_plates_dir: str
  - session_timestamp: str
  - session_file: str
  - enhanced_session_file: str
  - plate_database: Dict
  - enhanced_database: Dict
  - storage_lock: asyncio.Lock
  - last_save_time: float
  - save_interval: float
  - task: asyncio.Task
  - initialization_complete: bool
  - save_count: int
  - pending_save: bool
  - save_queued: bool
  + initialize(license_plates_dir: str, enhanced_plates_dir: str): None
  + shutdown(): None
  - _periodic_save(): None
  - _save_data(force: bool): None
  - _sync_save_detections(data, filepath): bool
  - _sync_save_enhanced(data, filepath): bool
  + add_detections(detections: List[Dict]): None
  + add_enhanced_results(results: List[Dict]): None
  + get_detections(): List[Dict]
  + get_enhanced_results(): List[Dict]
  + get_detections_by_tracking_id(tracking_id: str): List[Dict]
}

class EnhancerService {
  - known_plates: List[str]
  - storage_service: StorageService
  + initialize(known_plates_path: str, storage_service): None
  + enhance_detection(detection: Dict): Dict
  - _get_confidence_category(confidence: float): str
}

class LicensePlateValidator {
  - known_plates: List[str]
  - storage_service: StorageService
  - substitutions: Dict
  + add_known_plate(plate: str): None
  + get_plate_variations(plate_text: str): List[str]
  + calculate_similarity(plate1: str, plate2: str): float
  + match_with_known_plates(plate_text: str, threshold: float): Tuple[str, float]
  + enhance_detections(detections: List[Dict], min_confidence: float): Dict
  - _get_confidence_category(confidence: float): str
}

class LicensePlateRecognitionService {
  - detector_model: YOLO
  - ocr_reader: easyocr.Reader
  - initialized: bool
  - device: str
  - char_confusion: Dict
  - invalid_words: List[str]
  + initialize(): None
  - _initialize_detector(): None
  - _initialize_ocr(): None
  + detect_and_recognize(image: np.ndarray): Tuple[List[Dict], np.ndarray]
  - _recognize_plate_text(plate_image: np.ndarray): Dict
  - _preprocess_plate_image(plate_image: np.ndarray): np.ndarray
  - _process_ocr_results(ocr_result): Tuple[str, float, str]
  - _clean_plate_text(text: str): str
  - _apply_character_corrections(text: str, state_code: str): str
  - _is_valid_pattern(text: str, state_code: str): bool
  - _validate_plate_text(text: str, state_code: str): Tuple[bool, float]
}

class PlateDetector {
  - model: YOLO
  - reader: easyocr.Reader
  + load_model(model_path: str): YOLO
  + clean_plate_text(text: str): str
  + detect_and_recognize_plate(frame: np.ndarray): List[Dict]
}

' Application configuration
class Config {
  + camera_id: str
  + camera_width: str
  + camera_height: str
  + model_path: str
  + license_plates_dir: str
  + enhanced_plates_dir: str
  + known_plates_path: str
  + github_token: str
}

' Relationships
DetectionService --> CameraService
DetectionService --> LicensePlateRecognitionService
DetectionService --> StorageService
DetectionService --> EnhancerService

EnhancerService --> StorageService
EnhancerService --> LicensePlateValidator

LicensePlateRecognitionService ..> PlateDetector : uses similar functionality

@enduml